version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: yuki-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-yuki_chatbot}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    networks:
      - yuki-network
    command: mongod --auth

  # Redis for session management and caching
  redis:
    image: redis:7.2-alpine
    container_name: yuki-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - yuki-network

  # Main Chatbot Application
  chatbot-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: yuki-chatbot-app
    restart: unless-stopped
    environment:
      # Database Configuration
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/${MONGO_DB_NAME:-yuki_chatbot}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      
      # Application Configuration
      NODE_ENV: production
      PORT: 3001
      ML_SERVICE_PORT: 5000
      API_BASE_URL: http://localhost:3001/api
      
      # CORS Configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Performance Configuration
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-1000}
      KEEP_ALIVE_TIMEOUT: ${KEEP_ALIVE_TIMEOUT:-65000}
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-char-encryption-key-here}
    ports:
      - "3001:3001"
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - app_logs:/app/logs
      - ./ml-service/model.pkl:/app/ml-service/model.pkl:ro
      - ./ml-service/vectorizer.pkl:/app/ml-service/vectorizer.pkl:ro
      - ./ml-service/suggestion_model.pkl:/app/ml-service/suggestion_model.pkl:ro
      - ./ml-service/suggestion_vectorizer.pkl:/app/ml-service/suggestion_vectorizer.pkl:ro
      - ./ml-service/suggestion_binarizer.pkl:/app/ml-service/suggestion_binarizer.pkl:ro
    networks:
      - yuki-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: yuki-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - chatbot-app
    networks:
      - yuki-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: yuki-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - yuki-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: yuki-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - yuki-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  yuki-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16